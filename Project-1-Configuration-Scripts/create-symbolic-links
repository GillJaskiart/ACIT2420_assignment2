#!/bin/bash

# Reference for $SUDO_USER: https://www.baeldung.com/linux/identify-user-called-by-sudo
# home_path variable is the path to the home directory of the user running the script. 
# This script is required to run with sudo, so the username in that case can be accessed by $SUDO_USER, which stores the actual username who is using sudo.
#
home_path="/home/$SUDO_USER"


# cloned_dor variable stores the path to the directory containind the folders, assuming that the user stores the directory in their home directory.
#
cloned_dir="${home_path}/2420-as2-starting-files"


# create_symbolic_links function has the logic for creating symbolic links from the contents of the cloned directory to their appropriate locations
#
# Reference for ln -s and ln-sf commands: https://linuxize.com/post/how-to-create-symbolic-links-in-linux-using-the-ln-command/
# Reference for basename: https://linuxize.com/post/basename-command-in-linux/
# Reference for the condition -f and -d <path>: https://stackabuse.com/bash-check-if-directory-or-file-exists/
#
create_symbolic_links() {
	# this for-loop loops over the contents of the bin directory inside the cloned directory and creates symbolic links for all those files in the user's bin directory
	for file in "${cloned_dir}/bin"/*; do
		# the local variable base stores just the name of the file which is represented by the full path avaiblable inside $file variable
		local base=$(basename "$file")

		# the if statement checks if the destination path does not exist, then it creates the symbolic link
		# the else statement is useful when the destination path already exists, the symbolic link is made with force and the user is notified about the overwritting
		if [[ ! -f "${home_path}/bin/${base}" ]]; then
			ln -s "${file}" "${home_path}/bin/${base}"
			echo "symbolic link created for ${file}"
		else
			ln -sf "${file}" "${home_path}/bin/${base}"
			echo "${home_path}/bin/${base} already exists! it's contents were overwritten! Symbolic link successfully created!"
		fi
	done

	# this for-loop loops over the contents of the config directory and creates the symbolic links for all its sub-directories to the .config directory
	for dir in "${cloned_dir}/config"/*; do

		# the base2 vaiable stores just the name of the directory which is represented by the full path available inside $dir varibale
		local base2=$(basename "$dir")

		# the if statement checks if the destination path does not exist, then it creates the symbolic link
		# the else statement is useful when the destination path already exists, the symbolic link is made with force and the user is notified about the overwritting

		if [[ ! -d "${home_path}/.config/$base2" ]]; then
			ln -s "${dir}" "${home_path}/.config/${base2}"
			echo "symbolic link created for ${dir}"
		else
			ln -sf "${dir}" "${home_path}/.config/${base2}"
			echo "${home_path}/.config/${base2} already exists! it's contents were overwritten! Symbolic link successfully created!"
		fi
	done

	# the if statement checks if the destination file .bashrc doesnot exist, then creates the symbolic link from the cloned directory
	# the else statement is used when the destination .bashrc file already exist, so the file is overwritten and the user is notified about it
	if [[ ! -f "${home_path}/.bashrc" ]]; then
		ln -s "${cloned_dir}/home/bashrc" "${home_path}/.bashrc"
		echo "symbolic link created for ${cloned_dir}/home/bashrc"
	else
		ln -sf "${cloned_dir}/home/bashrc" "${home_path}/.bashrc"
		echo "${home_path}/.bashrc already exists! it's contents were overwritten! Symbolic link successfully created!"
	fi
}

# calling the function to create the symbolic links
create_symbolic_links
